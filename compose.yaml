services:
  mysqlDB:
    image: mysql:8.4
    container_name: mysqlDB
    command: ['mysqld', '--mysql-native-password=ON']
    healthcheck:
      test: [ "CMD", "mysqladmin" ,"ping", "-h", "${MYSQL_HOST:-mysqlDB}" ]
      interval: 5s
      timeout: 5s
      retries: 5
    platform: linux/amd64
    environment:
      MYSQL_ROOT_PASSWORD: "${MYSQL_PASSWORD:-a-very-long-and-secure-password}"
      MYSQL_DATABASE: "spexodisks"
    ports:
      - "3306:3306"
    volumes:
      # store data in a volume on the host for the MySQL database
      - type: bind
        source: ./mysql/local
        target: /var/lib/mysql
      # initialize the database from existing files in this directory
      - type: bind
        source: ./mysql/init
        target: /docker-entrypoint-initdb.d
    restart: "${RESTART_POLICY:-no}"
    profiles: ["db"]

  backend:
    platform: linux/amd64
    build:
      context: ./backend
      network: host
      args:
        - MYSQL_HOST=${MYSQL_HOST:-localhost}
        - MYSQL_USER=${MYSQL_USER:-root}
        - MYSQL_PASSWORD=${MYSQL_PASSWORD:-a-very-long-and-secure-password}
    image: ghcr.io/spexod/backend:LATEST
    healthcheck:
      test: ["CMD", "python", "healthcheck.py"]
      interval: 6s
      timeout: 5s
      retries: 10
    restart: "${RESTART_POLICY:-no}"
    volumes:
      # django-static is written at build time by the SpExWebsite Dockerfile
      - "django-static:/django/static_root:${VOLUME_SPECIFICATION:-rw}"
      - "./backend/output:/django/output:${VOLUME_SPECIFICATION:-rw}"
      - "./backend/data:/django/data:${VOLUME_SPECIFICATION:-rw}"
    environment:
      DATA_NEW_UPLOADS_ONLY: "${DATA_NEW_UPLOADS_ONLY:-true}"
      DATA_MIGRATE_FROM_STAGED: "${DATA_MIGRATE_FROM_STAGED:-false}"
      DJANGO_USE_NEW_TABLES: "${DJANGO_USE_NEW_TABLES:-true}"
      DJANGO_EMAIL_HOST: "${DJANGO_EMAIL_HOST:-smtp.gmail.com}"
      DJANGO_EMAIL_PORT: "${DJANGO_EMAIL_PORT:-587}"
      DJANGO_EMAIL_USER: "${DJANGO_EMAIL_USER:-None}"
      DJANGO_EMAIL_APP_PASSWORD: "${DJANGO_EMAIL_APP_PASSWORD:-None}"
      DJANGO_SECRET_KEY: "${DJANGO_SECRET_KEY:-a-50-or-more-character-sequence-of-characters-that-seems-to-go-on-for-very-long-time}"
      DEBUG: "${DEBUG:-true}"
      MYSQL_HOST: "${MYSQL_HOST:-localhost}"
      MYSQL_USER: "${MYSQL_USER:-root}"
      MYSQL_PASSWORD: "${MYSQL_PASSWORD:-a-very-long-and-secure-password}"
      API_USE_NEW_TABLES: "${API_USE_NEW_TABLES:-true}"
      UPLOAD_DIR: "/home/ubuntu/SpExServer/backend/output/"
      IS_DOCKER_BUILD: "false"
    profiles: ['api']
    # Optionally uncomment the following lines when using the "db" profile.
    # Wait for the database to be ready before starting the backend.
#    depends_on:
#      mysqlDB:
#        condition: service_healthy

  frontend:
    platform: linux/amd64
    build:
      context: ./SpExo-FrontEnd
      network: host
    image: ghcr.io/spexod/frontend:LATEST
    restart: "${RESTART_POLICY:-no}"
    profiles: ["web"]

  nginx:
    platform: linux/amd64
    image: nginx:latest
    restart: "${RESTART_POLICY:-no}"
    ports:
      - "80:8080"
      - "443:8443"
    volumes:
      - "./nginx/${NGINX_CONFIG_FILE:-setup.conf}:/etc/nginx/conf.d/default.conf:rw"
      - "/var/www/spexo/.well-known:/var/www/react/.well-known"
      - "/etc/letsencrypt/:/etc/letsencrypt/"
      - "django-static:/django/static_root:ro"
    profiles: ["api", "web"]

  ipython:
      build:
          context: ./backend
          dockerfile: ipython.Dockerfile
      container_name: ipython
      restart: "${RESTART_POLICY:-no}"
      user: root
      ports:
          - "8888:8888"
      environment:
          JUPYTER_TOKEN: "${JUPYTER_TOKEN:-docker}"
          GRANT_SUDO: "yes"
          DOCKER_STACKS_JUPYTER_CMD: "lab"
          DEBUG: "${DEBUG:-true}"
          MYSQL_HOST: "${MYSQL_HOST:-localhost}"
          MYSQL_USER: "${MYSQL_USER:-root}"
          MYSQL_PASSWORD: "${MYSQL_PASSWORD:-a-very-long-and-secure-password}"
          API_USE_NEW_TABLES: "${API_USE_NEW_TABLES:-true}"
      volumes:
          - ./backend:/backend
      profiles: ["ipython"]


volumes:
  django-static: