services:
  mysqlDB:
    image: mysql:8.4
    container_name: mysqlDB
    healthcheck:
      test: [ "CMD", "mysqladmin" ,"ping", "-h", "${MYSQL_HOST:-mysqlDB}" ]
      interval: 5s
      timeout: 5s
      retries: 5
    platform: linux/amd64
    environment:
      MYSQL_ROOT_PASSWORD: "${MYSQL_PASSWORD:-a-very-long-and-secure-password}"
      MYSQL_DATABASE: "spexodisks"
    ports:
      - "3306:3306"
    volumes:
      # store data in a volume on the host for the MySQL database
      - "./mysql/local:/var/lib/mysql:rw"
      # initialize the database from existing files in this directory
      - "./mysql/init:/docker-entrypoint-initdb.d:ro"
      # store SSL certificates in a volume on the host
      - "./mysql/certs:/etc/mysql/certs:ro"
      # Select between MySQL configuration files
      - "./mysql/${MYSQL_CONFIG_FILE:-local.cnf}:/etc/mysql/my.cnf:ro"
    profiles: ["db"]
    deploy:
      resources:
        limits:
            memory: 1280M
        reservations:
            memory: 512M
      restart_policy:
        delay: 2s
        condition: any

  backend:
    platform: linux/amd64
    build:
      context: ./backend
      network: host
      args:
        - MYSQL_HOST=${MYSQL_HOST:-localhost}
        - "MYSQL_USER=${MYSQL_USER:-root}"
        - "MYSQL_PASSWORD=${MYSQL_PASSWORD:-a-very-long-and-secure-password}"
        - "MPLCONFIGDIR=${MPLCONFIGDIR:-/home/python_user/backend_app/.cache/matplotlib}"
        - "DATA_OUTPUT_DIR=${DATA_OUTPUT_DIR:-/home/python_user/backend_app/output}"
    image: ghcr.io/spexod/backend:LATEST
    healthcheck:
      test: ["CMD", "python", "healthcheck.py"]
      interval: 6s
      timeout: 5s
      retries: 10
    # the container is read-only, except for specific volumes
    read_only: true
    volumes:
      # django_static is written at build time by the SpExWebsite Dockerfile
      - "django_static:/home/python_user/backend_app/static_root:${VOLUME_SPECIFICATION:-rw}"
      # matplotlib_cache is recommended for matplotlib to work in a docker container
      - "matplotlib_cache:${MPLCONFIGDIR:-/home/python_user/backend_app/.cache/matplotlib}:rw"
      # gunicorn to store temporary files
      - "gunicorn_tmp:/var/tmp:rw"
      # Data input for processing
      - "./backend/data:/home/python_user/backend_app/data:${VOLUME_SPECIFICATION:-rw}"
      # Data output from processing
      - "./backend/output:${DATA_OUTPUT_DIR:-/home/python_user/backend_app/output}:${VOLUME_SPECIFICATION:-rw}"
    environment:
      DATA_NEW_UPLOADS_ONLY: "${DATA_NEW_UPLOADS_ONLY:-true}"
      DATA_MIGRATE_FROM_STAGED: "${DATA_MIGRATE_FROM_STAGED:-false}"
      DJANGO_USE_NEW_TABLES: "${DJANGO_USE_NEW_TABLES:-true}"
      DJANGO_EMAIL_HOST: "${DJANGO_EMAIL_HOST:-smtp.gmail.com}"
      DJANGO_EMAIL_PORT: "${DJANGO_EMAIL_PORT:-587}"
      DJANGO_EMAIL_USER: "${DJANGO_EMAIL_USER:-None}"
      DJANGO_EMAIL_APP_PASSWORD: "${DJANGO_EMAIL_APP_PASSWORD:-None}"
      DJANGO_SECRET_KEY: "${DJANGO_SECRET_KEY:-a-50-or-more-character-sequence-of-characters-that-seems-to-go-on-for-very-long-time}"
      DEBUG: "${DEBUG:-true}"
      MYSQL_HOST: "${MYSQL_HOST:-localhost}"
      MYSQL_USER: "${MYSQL_USER:-root}"
      MYSQL_PASSWORD: "${MYSQL_PASSWORD:-a-very-long-and-secure-password}"
      API_USE_NEW_TABLES: "${API_USE_NEW_TABLES:-true}"
      UPLOAD_DIR: "/home/ubuntu/SpExServer/backend/output/"
      IS_DOCKER_BUILD: "false"
    profiles: ['api']
    deploy:
      resources:
        limits:
          memory: 1400M
        reservations:
          memory: 512M
      restart_policy:
        delay: 20s
        condition: any

    # Optionally uncomment the following lines when using the "db" profile.
    # Wait for the database to be ready before starting the backend.
#    depends_on:
#      mysqlDB:
#        condition: service_healthy

  frontend:
    platform: linux/amd64
    build:
      context: ./SpExo-FrontEnd
      network: host
    image: ghcr.io/spexod/frontend:LATEST
    profiles: ["web"]
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
      restart_policy:
        delay: 5s
        condition: any

  nginx:
    platform: linux/amd64
    image: nginx:latest
    ports:
      - "80:8080"
      - "443:8443"
    volumes:
      - "./nginx/${NGINX_CONFIG_FILE:-setup.conf}:/etc/nginx/conf.d/default.conf:rw"
      # the Keys for https encryption
      - ssl_keys:/etc/letsencrypt:ro
      # One the Server is needed to verify the challenge to website ownership
      - ssl_challenge:/var/www/certbot/.well-known:ro
      - "django_static:/django/static_root:ro"
    profiles: ["api", "web"]
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
      restart_policy:
        delay: 2s
        condition: any

  ipython:
      build:
          context: ./backend
          dockerfile: ipython.Dockerfile
      container_name: ipython
      user: root
      ports:
          - "8888:8888"
      environment:
          JUPYTER_TOKEN: "${JUPYTER_TOKEN:-docker}"
          GRANT_SUDO: "yes"
          DOCKER_STACKS_JUPYTER_CMD: "lab"
          DEBUG: "${DEBUG:-true}"
          MYSQL_HOST: "${MYSQL_HOST:-localhost}"
          MYSQL_USER: "${MYSQL_USER:-root}"
          MYSQL_PASSWORD: "${MYSQL_PASSWORD:-a-very-long-and-secure-password}"
          API_USE_NEW_TABLES: "${API_USE_NEW_TABLES:-true}"
      volumes:
          - ./backend:/backend
      profiles: ["ipython"]

  certbot:
    image: certbot/certbot
    volumes:
      - ssl_keys:/etc/letsencrypt:rw
      - ssl_challenge:/var/www/certbot/.well-known:rw
    command: [ "certonly", "--webroot", "--webroot-path=/var/www/certbot", "--email", "chw3k5@gmail.com", "--agree-tos", "--no-eff-email", "-d", "spexodisks.com", "-d", "www.spexodisks.com"]
    depends_on:
      - nginx
    profiles: [ "ssl" ]

  cert-gen:
    image: alpine
    volumes:
      - ./mysql/certs:/certs:rw
    entrypoint:
      - /bin/sh
      - -c
      - |
        apk add --no-cache openssl &&
        openssl genpkey -algorithm RSA -out /certs/mysql.key -pkeyopt rsa_keygen_bits:2048 &&
        openssl req -new -key /certs/mysql.key -out /certs/mysql.csr -subj "/CN=mysql/O=myorg/C=US" &&
        openssl x509 -req -in /certs/mysql.csr -signkey /certs/mysql.key -out /certs/mysql.crt -days 365 &&
        openssl genpkey -algorithm RSA -out /certs/ca.key -pkeyopt rsa_keygen_bits:2048 &&
        openssl req -new -x509 -key /certs/ca.key -out /certs/ca.crt -days 1095 -subj "/CN=Certificate Authority/O=myorg/C=US" &&
        chmod 600 /certs/* && chown 999:999 /certs/*
    profiles: [ "db-ssl" ]


volumes:
  django_static:
  matplotlib_cache:
  gunicorn_tmp:
  ssl_keys:
  ssl_challenge: